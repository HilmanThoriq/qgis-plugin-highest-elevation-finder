# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HighestElevationFinderDialog
                                 A QGIS plugin
 Mengetahui titik tertinggi dari suatu data DEM
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-09
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Hilman Thoriq | Hilman Thoriq
        email                : hilmanthoriq@mail.ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QDialog, QDialogButtonBox, QMessageBox
from qgis.core import (
    QgsProject, QgsRasterLayer, QgsPointXY, QgsGeometry, QgsFeature, 
    QgsVectorLayer, QgsField, QgsSymbol, QgsMarkerSymbol, QgsRasterBandStats,
    QgsCoordinateTransform, QgsCoordinateTransformContext
)
from qgis.PyQt.QtCore import QVariant
from qgis.analysis import QgsRasterCalculator, QgsRasterCalculatorEntry

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'HighestElevationFinder_dialog_base.ui'))


class HighestElevationFinderDialog(QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(HighestElevationFinderDialog, self).__init__(parent)
        self.setupUi(self)

        self.comboBox_rasterLayers.clear()
        for layer in QgsProject.instance().mapLayers().values():
            if isinstance(layer, QgsRasterLayer):
                self.comboBox_rasterLayers.addItem(layer.name(), layer)

        self.pushButton_findHighestPoint.clicked.connect(self.find_highest_point)

    def find_highest_point(self):
        raster_layer = self.comboBox_rasterLayers.currentData()
        if not raster_layer:
            QMessageBox.warning(self, "Warning", "Please select a raster layer.")
            return

        # Dapatkan statistik raster untuk band 1
        stats = raster_layer.dataProvider().bandStatistics(1, QgsRasterBandStats.All, raster_layer.extent(), 0)
        max_val = stats.maximumValue

        # Gunakan QgsRasterCalculator untuk menemukan piksel dengan nilai maksimum
        entries = []
        raster = QgsRasterCalculatorEntry()
        raster.ref = 'raster@1'
        raster.raster = raster_layer
        raster.bandNumber = 1
        entries.append(raster)

        # Ekspresi: jika nilai piksel = nilai maksimum, hasilnya 1, jika tidak 0
        expression = '{}*(raster@1 = {})'.format(max_val, max_val)
        output = QgsRasterCalculator(expression, 'memory:max_point', 'GTiff', raster_layer.extent(), raster_layer.width(), raster_layer.height(), entries)
        output.processCalculation()

        # Temukan koordinat piksel dengan nilai 1 (piksel maksimum)
        max_layer = QgsRasterLayer('memory:max_point')
        block = max_layer.dataProvider().block(1, max_layer.extent(), max_layer.width(), max_layer.height())
        for row in range(max_layer.height()):
            for col in range(max_layer.width()):
                if block.value(row, col) == max_val:
                    # Konversi koordinat piksel ke koordinat dunia
                    point = self.pixel_to_world(raster_layer, col, row)
                    self.create_point_layer(point, max_val)
                    return

    def pixel_to_world(self, raster_layer, col, row):
        # Dapatkan transformasi dari koordinat piksel ke koordinat dunia
        extent = raster_layer.extent()
        width = raster_layer.width()
        height = raster_layer.height()
        
        x_min = extent.xMinimum()
        y_max = extent.yMaximum()
        
        x_res = extent.width() / width
        y_res = extent.height() / height
        
        x_coord = x_min + (col + 0.5) * x_res
        y_coord = y_max - (row + 0.5) * y_res
        
        return QgsPointXY(x_coord, y_coord)

    def create_point_layer(self, point, elevation):
        layer = QgsVectorLayer("Point?crs={}".format(QgsProject.instance().crs().authid()), "Highest Point", "memory")
        provider = layer.dataProvider()

        provider.addAttributes([QgsField("elevation", QVariant.Double)])
        layer.updateFields()

        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(point))
        feature.setAttributes([elevation])
        provider.addFeatures([feature])

        symbol = QgsMarkerSymbol.createSimple({'color': 'red', 'size': '4'})
        layer.renderer().setSymbol(symbol)
        layer.triggerRepaint()

        QgsProject.instance().addMapLayer(layer)
        self.accept()  # Close the dialog after finding the point
